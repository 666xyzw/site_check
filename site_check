#!/usr/bin/perl

# Tool to automate checking website availability
# Written by: 666xyzw

use strict;
use LWP::UserAgent ();


sub getDomains{
    # Reads the domains from a file called "domains" into @data list

    open my $RH, '<', "domains" || die "Can not open file!\n";
    my @data = <$RH>;
    close($RH);

    return @data;

}


sub domainTest{
    # Tests if the website is alive or not and returns the specific HTTP code

    my $d = $_[0];  # holds the domain name
    my $p = $_[1];  # holds the protocol

    my $ua = LWP::UserAgent->new(protocols_allowed=>['http', 'https']);
    my $response = $ua->get("$p://$d");
       
    return $response->status_line();

}


sub responseParse{
    # Parses the response give by the web server and acts acordingly;
    # If the server responds with an error "certificate verify failed"
    # it means that the server does not communicate over HTTPS protocol
    # and the check will be re-run over HTTP protocol.

    my $response = $_[0];

    if (grep  /.*certificate verify failed\b.*$/, $response){  
        
        printf "DOMAIN: %s \n", $_[1];
        printf "\tDomain does not accept HTTPS connection!\n";
        printf "\tTrying with HTTP connection!\n";

        my $protocol = "http";

        printf "\tHTTP Status: %s \n", domainTest($_[1], $protocol);

        printf "\n";

    }else{

        printf "DOMAIN: %s \n", $_[1];
        printf "\tHTTPS Status: %s \n", $response;
        printf "\n";

    }
}


sub multiCheck{
    # Runs the check for multiple domains specified in the "domains" file
    
    my @domain_list = @_;
    my $protocol;
    my $server_response;
    my $parsed_response;

    foreach my $domain (@domain_list[3..$#domain_list]){

        $protocol = "https";

        $server_response = domainTest($domain, $protocol);
        
        responseParse($server_response, $domain);
               
    }

}


sub singleCheck{
    # Runs the check for a single domain specified in the command line

    my $single_domain = $_[0];
    my $protocol = "https";
    my $server_response;

    $server_response = domainTest($single_domain, $protocol);

    responseParse($server_response, $single_domain);

}


sub main {
    
    if ($ARGV[0] eq ''){
        
        multiCheck(getDomains());

    }else{

        singleCheck($ARGV[0]);
    }

}


main();